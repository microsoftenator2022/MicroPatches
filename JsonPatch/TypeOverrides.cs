
using System;
using System.Collections.Generic;

using Newtonsoft.Json.Linq;

namespace MicroPatches;

public static partial class JsonPatch
{
    public static partial class Overrides
    {
        public static readonly Dictionary<Type, Func<JToken, JToken>> ElementIdentities = new()
        {
            { typeof(Kingmaker.BarkBanters.BlueprintBarkBanter.BanterResponseEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.BarkBanters.BlueprintBarkBanter.BanterResponseEntry.m_Unit),
                    nameof(Kingmaker.BarkBanters.BlueprintBarkBanter.BanterResponseEntry.Response)) },
            { typeof(Kingmaker.Blueprints.Area.BlueprintAreaPart.SceneOverride), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Area.BlueprintAreaPart.SceneOverride.m_EtudeToCheck)) },
            { typeof(Kingmaker.Blueprints.Cargo.BlueprintCargoRoot.CargoTemplate), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Cargo.BlueprintCargoRoot.CargoTemplate.m_ItemOrigin)) },
            { typeof(Kingmaker.Blueprints.EntityReference), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.EntityReference.UniqueId)) },
            { typeof(Kingmaker.Blueprints.Items.Weapons.BlueprintCategoryDefaults.CategoryDefaultEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Items.Weapons.BlueprintCategoryDefaults.CategoryDefaultEntry.Key)) },
            { typeof(Kingmaker.Blueprints.Loot.LootEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Loot.LootEntry.m_Item),
                    nameof(Kingmaker.Blueprints.Loot.LootEntry.Count),
                    nameof(Kingmaker.Blueprints.Loot.LootEntry.m_ReputationPointsToUnlock)) },
            { typeof(Kingmaker.Blueprints.Loot.TrashLootSettings.CargoVolume), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Loot.TrashLootSettings.CargoVolume.CargoVolumeAmount)) },
            { typeof(Kingmaker.Blueprints.Loot.TrashLootSettings.TypeChance), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Loot.TrashLootSettings.TypeChance.Setting)) },
            { typeof(Kingmaker.Blueprints.Loot.TrashLootSettings.TypeChance.ItemData), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Loot.TrashLootSettings.TypeChance.ItemData.Type)) },
            { typeof(Kingmaker.Blueprints.Quests.QuestGroup), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Quests.QuestGroup.Id)) },
            { typeof(Kingmaker.Blueprints.Root.BlueprintCharGenRoot.PregenEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.BlueprintCharGenRoot.PregenEntry.UnitBlueprint)) },
            { typeof(Kingmaker.Blueprints.Root.BlueprintDismembermentRoot.FXDamagePair), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.BlueprintDismembermentRoot.FXDamagePair.DamageType)) },
            { typeof(Kingmaker.Blueprints.Root.BlueprintSystemAnomaliesRoot.SkillToFacts), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.BlueprintSystemAnomaliesRoot.SkillToFacts.Skill)) },
            { typeof(Kingmaker.Blueprints.Root.BlueprintSystemAnomaliesRoot.StatName), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.BlueprintSystemAnomaliesRoot.StatName.Skill)) },
            { typeof(Kingmaker.Blueprints.Root.BlueprintWarpWeatherRoot.WeatherEffectProfile), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.BlueprintWarpWeatherRoot.WeatherEffectProfile.VisualStateEffectType)) },
            { typeof(Kingmaker.Blueprints.Root.DamageCRPair), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.DamageCRPair.CR)) },
            { typeof(Kingmaker.Blueprints.Root.DialogCameraPositionOffsetEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.DialogCameraPositionOffsetEntry.Size)) },
            { typeof(Kingmaker.Blueprints.Root.Fx.FxRoot.FootprintSurfaceSettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.Fx.FxRoot.FootprintSurfaceSettings.GroundType)) },
            { typeof(Kingmaker.Blueprints.Root.SkillCheckRoot.SkillCheckDifficultyEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.SkillCheckRoot.SkillCheckDifficultyEntry.Difficulty)) },
            { typeof(Kingmaker.Blueprints.Root.SystemMechanics.BlueprintCombatRoot.DOTEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.SystemMechanics.BlueprintCombatRoot.DOTEntry.Type)) },
            { typeof(Kingmaker.Blueprints.Root.SystemMechanics.BlueprintDestructibleObjectsRoot.StandardObjectSettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.SystemMechanics.BlueprintDestructibleObjectsRoot.StandardObjectSettings.Type)) },
            { typeof(Kingmaker.Blueprints.Root.SystemMechanics.BlueprintDifficultyRoot.DifficultyTypeFacts), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.SystemMechanics.BlueprintDifficultyRoot.DifficultyTypeFacts.Type)) },
            { typeof(Kingmaker.Blueprints.Root.SystemMechanics.UnitConditionBuffsRoot.Entry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.SystemMechanics.UnitConditionBuffsRoot.Entry.Type)) },
            { typeof(Kingmaker.Blueprints.Root.UIConfig.CoverHighlightConfig.CoverHighlightColorEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Blueprints.Root.UIConfig.CoverHighlightConfig.CoverHighlightColorEntry.Stage)) },
            { typeof(Kingmaker.Code.UI.MVVM.VM.FeedbackPopup.FeedbackPopupItem), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Code.UI.MVVM.VM.FeedbackPopup.FeedbackPopupItem.ItemType)) },
            { typeof(Kingmaker.Code.UI.MVVM.View.Overtips.SystemMap.OvertipSystemObjectStateColor), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Code.UI.MVVM.View.Overtips.SystemMap.OvertipSystemObjectStateColor.State)) },
            { typeof(Kingmaker.Designers.EventConditionActionSystem.Actions.OpenVendorSelectingWindow.VendorEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Designers.EventConditionActionSystem.Actions.OpenVendorSelectingWindow.VendorEntry.Vendor)) },
            { typeof(Kingmaker.Designers.EventConditionActionSystem.Actions.Recruit.RecruitData), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Designers.EventConditionActionSystem.Actions.Recruit.RecruitData.m_CompanionBlueprint)) },
            { typeof(Kingmaker.Designers.EventConditionActionSystem.Evaluators.ConditionalUnitEvaluator.ConditionalPair), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Designers.EventConditionActionSystem.Evaluators.ConditionalUnitEvaluator.ConditionalPair.Unit)) },
            { typeof(Kingmaker.Designers.EventConditionActionSystem.Evaluators.NearestPosition.ConditionalPair), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Designers.EventConditionActionSystem.Evaluators.NearestPosition.ConditionalPair.Position)) },
            { typeof(Kingmaker.Designers.EventConditionActionSystem.NamedParameters.ParametrizedContextSetter.ParameterEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Designers.EventConditionActionSystem.NamedParameters.ParametrizedContextSetter.ParameterEntry.Name)) },
            { typeof(Kingmaker.Globalmap.Blueprints.BlueprintStarSystemMap.StarAndName), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Globalmap.Blueprints.BlueprintStarSystemMap.StarAndName.Star)) },
            { typeof(Kingmaker.Globalmap.Blueprints.Colonization.BlueprintColonyEventsRoot.ColonyEventToTimer), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Globalmap.Blueprints.Colonization.BlueprintColonyEventsRoot.ColonyEventToTimer.m_ColonyEvent)) },
            { typeof(Kingmaker.Globalmap.Blueprints.SectorMap.BlueprintWarpRoutesSettings.DifficultySettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Globalmap.Blueprints.SectorMap.BlueprintWarpRoutesSettings.DifficultySettings.Difficulty)) },
            { typeof(Kingmaker.Globalmap.CombatRandomEncounters.UnitInGroupSettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Globalmap.CombatRandomEncounters.UnitInGroupSettings.Unit)) },
            { typeof(Kingmaker.Tutorial.Actions.TutorialContextDataEvaluator), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Tutorial.Actions.TutorialContextDataEvaluator.Key)) },
            { typeof(Kingmaker.UI.Common.UIConfigComponents.EnumUnitSubtypeIcons.MyEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UI.Common.UIConfigComponents.EnumUnitSubtypeIcons.MyEntry.Value)) },
            { typeof(Kingmaker.UnitLogic.Abilities.Blueprints.BlueprintAbilitySoundFXSettings.MechanicalSoundEventSettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Abilities.Blueprints.BlueprintAbilitySoundFXSettings.MechanicalSoundEventSettings.m_AbilityEvent),
                    nameof(Kingmaker.UnitLogic.Abilities.Blueprints.BlueprintAbilitySoundFXSettings.MechanicalSoundEventSettings.m_Target)) },
            { typeof(Kingmaker.UnitLogic.Abilities.Blueprints.BlueprintAbilitySoundFXSettings.UnitSoundAnimationEventSettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Abilities.Blueprints.BlueprintAbilitySoundFXSettings.UnitSoundAnimationEventSettings.m_UnitSoundAnimationEventType),
                    nameof(Kingmaker.UnitLogic.Abilities.Blueprints.BlueprintAbilitySoundFXSettings.UnitSoundAnimationEventSettings.m_Target)) },
            { typeof(Kingmaker.UnitLogic.Abilities.Components.AbilityCustomAnimationByBuff.Entry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Abilities.Components.AbilityCustomAnimationByBuff.Entry.m_Buff)) },
            { typeof(Kingmaker.UnitLogic.Abilities.Visual.Blueprints.BlueprintAbilityVisualFXSettings.AbilityEventData), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Abilities.Visual.Blueprints.BlueprintAbilityVisualFXSettings.AbilityEventData.m_Event),
                    nameof(Kingmaker.UnitLogic.Abilities.Visual.Blueprints.BlueprintAbilityVisualFXSettings.AbilityEventData.m_Target)) },
            { typeof(Kingmaker.UnitLogic.Abilities.Visual.Blueprints.BlueprintAbilityVisualFXSettings.AnimationEventData), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Abilities.Visual.Blueprints.BlueprintAbilityVisualFXSettings.AnimationEventData.m_Event),
                    nameof(Kingmaker.UnitLogic.Abilities.Visual.Blueprints.BlueprintAbilityVisualFXSettings.AnimationEventData.m_Target)) },
            { typeof(Kingmaker.UnitLogic.FactLogic.ChangeVendorPrices.Entry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.FactLogic.ChangeVendorPrices.Entry.m_Item)) },
            { typeof(Kingmaker.UnitLogic.Levelup.Components.ApplyCareerPath.SelectionEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Levelup.Components.ApplyCareerPath.SelectionEntry.Group)) },
            { typeof(Kingmaker.UnitLogic.Mechanics.Actions.StarshipLaunchBayLogic.SingleBayInfo), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Mechanics.Actions.StarshipLaunchBayLogic.SingleBayInfo.bayLocation)) },
            { typeof(Kingmaker.UnitLogic.Mechanics.Actions.WarhammerBuffDurationActions.ActionsInfo), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.Mechanics.Actions.WarhammerBuffDurationActions.ActionsInfo.durationStart),
                    nameof(Kingmaker.UnitLogic.Mechanics.Actions.WarhammerBuffDurationActions.ActionsInfo.durationEnd)) },
            { typeof(Kingmaker.UnitLogic.UI.UIPropertySettings), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.UnitLogic.UI.UIPropertySettings.m_PropertyName)) },
            { typeof(Kingmaker.Visual.HitSystem.BloodEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Visual.HitSystem.BloodEntry.Type)) },
            { typeof(Kingmaker.Visual.HitSystem.BloodPrefabsFromWeaponAnimationStyleEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Visual.HitSystem.BloodPrefabsFromWeaponAnimationStyleEntry.WeaponAnimationStyle)) },
            { typeof(Kingmaker.Visual.HitSystem.DamageEntry), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Visual.HitSystem.DamageEntry.Type)) },
            { typeof(Kingmaker.Visual.Sound.UnitAsksComponent.AnimationBark), 
                static t => IdentifyByProperties(t,
                    nameof(Kingmaker.Visual.Sound.UnitAsksComponent.AnimationBark.AnimationEvent)) },
        };

        static readonly Type[] IndexIdentifiedTypes =
        [
            typeof(Kingmaker.Blueprints.Area.ConditionAction),
            typeof(Kingmaker.Blueprints.Root.Fx.DeathFxFromEnergyEntry),
            typeof(Kingmaker.UnitLogic.Customization.ClothesSelection),
            typeof(Kingmaker.Visual.CharacterSystem.KingmakerEquipmentEntity.TwoLists),
            typeof(Kingmaker.Visual.HitSystem.HitCollection),
            typeof(Kingmaker.Visual.HitSystem.HitEntry),
            typeof(Kingmaker.Visual.HitSystem.ShieldHitEntry),
            typeof(Kingmaker.Visual.Sound.UnitAsksComponent.BarkEntry),
            typeof(Kingmaker.Visual.Sound.UnitAsksComponent.PersonalizedBark),
            typeof(Warhammer.SpaceCombat.Blueprints.Progression.BlueprintAbilitiesUnlockTable.AbilityList),
        ];

    }
}
